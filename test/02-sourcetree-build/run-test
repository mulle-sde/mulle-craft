#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


run_mulle_craft()
{
   log_fluff "####################################"
   log_fluff ${MULLE_CRAFT} ${MULLE_CRAFT_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_CRAFT} -e ${MULLE_CRAFT_FLAGS} "$@"
}


expect_content()
{
   local output="$1"
   local expect="$2"

   if [ ! -f "${output}" ]
   then
      if [ -z "${expect}" ]
      then
         return
      fi
      fail "Did not produce \"${output}\" as expected"
   else
      if [ -z "${expect}" ]
      then
         fail "Did produce \"${output}\" unexpectedly. Nothing was expected"
      fi
   fi

   if [ -f "${expect}.${MULLE_UNAME}" ]
   then
      expect="${expect}.${MULLE_UNAME}"
   fi

   if [ ! -f "${expect}" ]
   then
      internal_fail "\"${expect}\" is missing from test"
   fi

   local diffs

   diffs="`diff -b "${output}" "${expect}"`"
   if [ $? -ne 0 ]
   then
      # fix for mingw
      if [ `wc -l <<< "${diffs}"` -eq 2 ]
      then
         if egrep -q 'CMAKE_LINKER:PATH=' <<< "${diffs}"
         then
            return 0
         fi
      fi

      log_error "Unexpected output generated"
      cat <<EOF >&2
----------------
Output: ($output)
----------------
`cat "${output}"`
----------------
Expected: ($expect)
----------------
`cat "${expect}"`
----------------
Diff:
----------------
${diffs}
----------------
EOF
      exit 1
   fi
}


run_test()
{
   local directory="$1" ; shift
   local cmake_expect="$1"; shift
   local make_expect="$1"; shift

   MULLE_TEST_DIR="${PWD}" \
   MULLE_SOURCETREE_FLAGS="-e ${MULLE_SOURCETREE_FLAGS}" \
   CMAKE_REDIRECT_FILE="${directory}/cmake-args.txt" \
   MAKE_REDIRECT_FILE="${directory}/make-args.txt" \
   CMAKE="${PWD}/../mock-cmake" \
   MAKE="${PWD}/../mock-make" \
   BUILD_DIR="${directory}/build" \
      run_mulle_craft "$@"

   if [ "$?" -ne 0 ]
   then
      exit 1
   fi

   expect_content "${directory}/cmake-args.txt" "${cmake_expect}"
   expect_content "${directory}/make-args.txt" "${make_expect}"

   remove_file_if_present "${directory}/cmake-args.txt"
   remove_file_if_present "${directory}/make-args.txt"
   rmdir_safer "${directory}/build"
}


main()
{
   MULLE_CRAFT_FLAGS="$@"

   _options_mini_main "$@"

   local directory

   directory="`make_tmp_directory`" || exit 1
   directory="${directory:-/tmp/build}"

   #
   # Check that some simple pass through stuff works
   #
   run_test "${directory}" "cmake.txt" "make.txt" project --debug
   log_verbose "----- #1 PASSED -----"

   run_test "${directory}" "cmake2.txt" "make.txt" buildorder --debug --buildorder-file "${PWD}/buildorder"
   log_verbose "----- #2 PASSED -----"

   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}



init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir`" || exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   MULLE_CRAFT="${MULLE_CRAFT:-${PWD}/../../mulle-craft}"
}



init "$@"
main "$@"


#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_CRAFT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.18.3


trap_fail()
{
   exit 1
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   Craft projects given by a "craftorder" file. Then craft the main project if
   desired.

   See the various commands for more help.

Flags:
EOF

   (
      options_technical_flags_usage "               : "

      cat <<EOF
   --kitchen-dir <dir>      : specify kitchen directory
   --definition-dir <dir>   : specify definitions directory for dependencies
   --craftorder-file <file> : specify craftorder file, mandatory for some commands
   --project-dir <dir>      : specify project directory
EOF
   ) | LC_ALL=C sort

   cat <<EOF

Commands:
   craftorder : craft projects using a craftorder file
   clean      : clean output
   list       : list remaining builds in craftorder file
   log        : inspect kitchen logs
   project    : craft main project without a craftorder file (default)
   search     : search for craftinfos (dependeny) or makeinfo (project)
   status     : returns 0 if dependency is ready
EOF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'NO' ]
   then
      cat <<EOF

      (use mulle-craft -v help to show more commands and flags)
EOF
   fi

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'
   local MULLE_FLAG_IGNORE_GRAVEYARD='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local MULLE_FLAG_MOTD="DEFAULT"
   local FLAG_OUTSIDE_ENV='NO'
   local TEST_ENVIRONMENT='NO'

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         -k|--kitchen-dir|-b|--build-dir)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            KITCHEN_DIR="$1"
         ;;

         -d|--definition-dir)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            INFO_DIR="$1"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -p|--project-dir)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            exekutor cd "$1" || exit 1
         ;;

         --craftorder-file)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            CRAFTORDER_FILE="$1"
         ;;

         --craftorder-kitchen-dir|--craftorder-build-dir)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            CRAFTORDER_KITCHEN_DIR="$1"
         ;;

         --dependency-dir)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            DEPENDENCY_DIR="$1"
         ;;

         --test-environment)
            MULLE_TEST_ENVIRONMENT='YES'
         ;;

         --motd)
            MULLE_FLAG_MOTD='YES'
         ;;

         --no-motd)
            MULLE_FLAG_MOTD='NO'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   case "${MULLE_VIRTUAL_ROOT}" in
      "")
         MULLE_VIRTUAL_ROOT="`pwd -P`"
         if [ "${MULLE_VIRTUAL_ROOT}" = "/" ]
         then
            fail "You are running this in root, which is not supported"
         fi
         log_info "mulle-craft sets MULLE_VIRTUAL_ROOT to \"${MULLE_VIRTUAL_ROOT}\""
         log_warning "warning: project settings have not been read"
      ;;

      */)
         fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" must not end with /"
      ;;
   esac

   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_CRAFT_DEPENDENCY_DIR}}"
   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_DEPENDENCY_DIRNAME:-dependency}}"

   ADDICTION_DIR="${ADDICTION_DIR:-${MULLE_CRAFT_ADDICTION_DIR}}"
   ADDICTION_DIR="${ADDICTION_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_ADDICTION_DIRNAME:-addiction}}"

   #prefer KITCHEN_DIR over older BUILD_DIR
   KITCHEN_DIR="${KITCHEN_DIR:-${BUILD_DIR}}"
   KITCHEN_DIR="${KITCHEN_DIR:-${MULLE_CRAFT_KITCHEN_DIR}}"
   KITCHEN_DIR="${KITCHEN_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_KITCHEN_DIRNAME:-kitchen}}"

   CRAFTORDER_KITCHEN_DIR="${CRAFTORDER_KITCHEN_DIR:-${MULLE_CRAFT_CRAFTORDER_KITCHEN_DIR}}"
   CRAFTORDER_KITCHEN_DIR="${CRAFTORDER_KITCHEN_DIR:-${KITCHEN_DIR}/${MULLE_CRAFT_CRAFTORDER_KITCHEN_DIRNAME:-.craftorder}}"

   local cmd="$1"

   [ $# -eq 0 ] || shift

   # dir commands should be fast thouth
   case "${cmd}" in
      *-dir)
      ;;

      *)
         MULLE_MAKE="${MULLE_MAKE:-`command -v mulle-make`}"
         [ -z "${MULLE_MAKE}" ] && fail "mulle-make not in PATH"

         MULLE_DISPENSE="${MULLE_DISPENSE:-`command -v mulle-dispense`}"
         [ -z "${MULLE_DISPENSE}" ] && fail "mulle-dispense not in PATH"
      ;;
   esac



   if [ "${MULLE_FLAG_LOG_SETTINGS}" = 'YES' ]
   then
      log_trace2 "KITCHEN_DIR :           ${KITCHEN_DIR}"
      log_trace2 "CRAFTORDER_KITCHEN_DIR: ${CRAFTORDER_KITCHEN_DIR}"
   fi

   #
   # project can give the default way to build this
   #
   cmd="${cmd:-${MULLE_CRAFT_DEFAULT_CMD}}"

   case "${cmd:-project}" in
      craftorder)
         # shellcheck source=src/mulle-craft-build.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         build_craftorder_main "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-craft-clean.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-clean.sh"

         craft_clean_main "$@"
      ;;

      addiction-dir)
         printf "%s\n" "${ADDICTION_DIR}"
      ;;

      dependency-dir)
         printf "%s\n" "${DEPENDENCY_DIR}"
      ;;

      craftorder-kitchen-dir)
         printf "%s\n" "${CRAFTORDER_KITCHEN_DIR}"
      ;;

      kitchen-dir)
         printf "%s\n" "${KITCHEN_DIR}"
      ;;

      libexec-dir)
         printf "%s\n" "${MULLE_CRAFT_LIBEXEC_DIR}"
      ;;

      install)
         log_info "mulle-craft doesn't install. Use mulle-make directly."
         exit 1
      ;;

      list)
         # shellcheck source=src/mulle-craft-build.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         list_craftorder_main "$@"
      ;;

      log)
         # shellcheck source=src/mulle-craft-log.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-log.sh"

         craft_log_main "$@"
      ;;

      tool-env)
         printf "ADDICTION_DIR='%s'\n" "${ADDICTION_DIR}"
         printf "CRAFTORDER_KITCHEN_DIR='%s'\n" "${CRAFTORDER_KITCHEN_DIR}"
         printf "DEPENDENCY_DIR='%s'\n" "${DEPENDENCY_DIR}"
         printf "KITCHEN_DIR='%s'\n" "${KITCHEN_DIR}"
      ;;

      project)
         # shellcheck source=src/mulle-craft-build.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         build_project_main "$@"
      ;;

      # rename to find ? again ??
      search)
         # shellcheck source=src/mulle-craft-search.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-search.sh"

         craft_search_main "$@"
      ;;

      searchpath)
         # shellcheck source=src/mulle-craft-searchpath.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-searchpath.sh"

         craft_searchpath_main "$@"
      ;;

      quickstatus)
         # shellcheck source=src/mulle-craft-dependency.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-dependency.sh"

         quickstatus_main "$@"
      ;;

      status)
         # shellcheck source=src/mulle-craft-status.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-status.sh"

         status_main "$@"
      ;;

      uname)
         exekutor printf "%s\n" "${MULLE_UNAME}"
      ;;

      version)
         exekutor printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         build_single_dependency_main "${cmd}" "$@"
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_ENV_VERSION}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
      echo "mulle-bashfunctions-env not installed" >&2 && \
      exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" || exit 1

   r_get_libexec_dir "$0" "mulle-craft" "mulle-craft-build.sh"
   MULLE_CRAFT_LIBEXEC_DIR="${RVAL}"

   #
   # minimal setup exit
   #
   if [ "$1" = "libexec-dir" ]
   then
      printf "%s\n" "${MULLE_CRAFT_LIBEXEC_DIR}"
      exit 0
   fi

   set -o pipefail

   call_main "${MULLE_CRAFT_FLAGS}" "$@"
}



_init "$@" # needs params


#! /usr/bin/env mulle-bash
# shellcheck shell=bash
# shellcheck disable=SC2236
# shellcheck disable=SC2166
# shellcheck disable=SC2006
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_CRAFT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=3.2.1

#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if ! [ ${MULLE_CRAFT_LIBEXEC_DIR+x} ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-craft" "mulle-craft-clean.sh"
   MULLE_CRAFT_LIBEXEC_DIR="${RVAL}"
fi

set +u



craft::usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   Crafts either projects given by a "craftorder" file. Or crafts the "project"
   in the current directory. The actual build of each individual project is done
   via mulle-make.

   mulle-craft searches for definition directories, which may contain
   compiler flags or commands and forwards them to mulle-make. See "search"
   for more details.

   See the various commands for more help.

Flags:
EOF

   (
      options_technical_flags_usage "                    : "

      cat <<EOF
   --                       : pass remaining arguments to mulle-make
   --kitchen-dir <dir>      : specify kitchen directory
   --definition-dir <dir>   : specify definitions directory for dependencies
   --craftorder-file <file> : specify craftorder file, mandatory for some commands
   --project-dir <dir>      : specify project directory
EOF
   ) | LC_ALL=C sort

   cat <<EOF

Commands:
   clean                : clean output
   craftorder           : craft projects using a craftorder file
   find                 : find an item in craftinfos
   list                 : list recraft::maining builds in craftorder file
   log                  : inspect kitchen logs
   project              : craft craft::main project without craftorder (default)
   qualify              : test build qualifiers used in craftorder files
   searchpath           : show searchpath for headers and libraries
   status               : returns 0 if dependency is ready
   style                : show known build styles
EOF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'NO' ]
   then
      cat <<EOF

      (use mulle-craft -v help to show flags)
EOF
   fi

   exit 1
}


craft::setup_environment()
{
   case "${MULLE_VIRTUAL_ROOT}" in
      "")
         MULLE_VIRTUAL_ROOT="`pwd -P`"
         if [ "${MULLE_VIRTUAL_ROOT}" = "/" ]
         then
            fail "You are running this in root, which is not supported"
         fi

         if [ "${MULLE_SQUELCH_ENVIRONMENT_WARNING}" != 'YES' ]
         then
            log_warning "Command is run outside of the mulle-sde environment"
         fi
         log_verbose "(MULLE_VIRTUAL_ROOT set to \"${MULLE_VIRTUAL_ROOT}\")"
      ;;

      */)
         fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" must not end with /"
      ;;
   esac

   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_CRAFT_DEPENDENCY_DIR}}"
   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_DEPENDENCY_DIRNAME:-dependency}}"

   ADDICTION_DIR="${ADDICTION_DIR:-${MULLE_CRAFT_ADDICTION_DIR}}"
   ADDICTION_DIR="${ADDICTION_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_ADDICTION_DIRNAME:-addiction}}"

   #prefer KITCHEN_DIR over older BUILD_DIR
   KITCHEN_DIR="${KITCHEN_DIR:-${BUILD_DIR}}"
   KITCHEN_DIR="${KITCHEN_DIR:-${MULLE_CRAFT_KITCHEN_DIR}}"
   KITCHEN_DIR="${KITCHEN_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_KITCHEN_DIRNAME:-kitchen}}"

   CRAFTORDER_KITCHEN_DIR="${CRAFTORDER_KITCHEN_DIR:-${MULLE_CRAFT_CRAFTORDER_KITCHEN_DIR}}"
   CRAFTORDER_KITCHEN_DIR="${CRAFTORDER_KITCHEN_DIR:-${KITCHEN_DIR}/${MULLE_CRAFT_CRAFTORDER_KITCHEN_DIRNAME:-.craftorder}}"

   if [ "${MULLE_FLAG_LOG_SETTINGS}" = 'YES' ]
   then
      log_setting "KITCHEN_DIR :           ${KITCHEN_DIR}"
      log_setting "CRAFTORDER_KITCHEN_DIR: ${CRAFTORDER_KITCHEN_DIR}"
   fi

   #
   # various very basic noob checks
   #
   if [ "${KITCHEN_DIR#${DEPENDENCY_DIR}}" != "${KITCHEN_DIR}" -o \
        "${DEPENDENCY_DIR#${KITCHEN_DIR}}" != "${DEPENDENCY_DIR}" ]
   then
      fail "Don't place DEPENDENCY_DIR into kitchen or vice versa"
   fi

   if [ "${ADDICTION_DIR#${DEPENDENCY_DIR}}" != "${ADDICTION_DIR}" -o \
        "${DEPENDENCY_DIR#${ADDICTION_DIR}}" != "${DEPENDENCY_DIR}" ]
   then
      fail "Don't place ADDICTION_DIR into kitchen or vice versa"
   fi

   r_basename "${DEPENDENCY_DIR}"
   case "${RVAL}" in
      kitchen|addiction|stash|src|cmake)
         fail "Don't use misleading name \"${RVAL}\" for DEPENDENCY_DIR"
      ;;
   esac

   r_basename "${KITCHEN_DIR}"
   case "${RVAL}" in
      dependency|addiction|stash|src|cmake)
         fail "Don't use misleading name \"${RVAL}\" for KITCHEN_DIR"
      ;;
   esac

   r_basename "${ADDICTION_DIR}"
   case "${RVAL}" in
      dependency|kitchen|stash|src|cmake)
         fail "Don't use misleading name \"${RVAL}\" for ADDICTION_DIR"
      ;;
   esac
}


craft::main()
{
   local MULLE_FLAG_MOTD="DEFAULT"
   local FLAG_OUTSIDE_ENV='NO'
   local TEST_ENVIRONMENT='NO'

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            craft::usage
         ;;

         -k|--kitchen-dir|-b|--build-dir)
            [ $# -eq 1 ] && craft::usage "Missing argument to \"$1\""
            shift

            KITCHEN_DIR="$1"
         ;;

         -d|--definition-dir|--aux-definition-dir)
            [ $# -eq 1 ] && craft::usage "Missing argument to \"$1\""
            shift

            r_add_line "${INFO_DIRS}" "$1"
            INFO_DIRS="${RVAL}"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -p|--project-dir)
            [ $# -eq 1 ] && craft::usage "Missing argument to \"$1\""
            shift

            exekutor cd "$1" || exit 1
         ;;

         --no-craftorder-file)
            CRAFTORDER_FILE='NONE'
         ;;

         --craftorder-file)
            [ $# -eq 1 ] && craft::usage "Missing argument to \"$1\""
            shift

            CRAFTORDER_FILE="$1"
         ;;

         --craftorder-kitchen-dir|--craftorder-build-dir)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            CRAFTORDER_KITCHEN_DIR="$1"
         ;;

         --dependency-dir)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            DEPENDENCY_DIR="$1"
         ;;

         --test-environment)
            MULLE_TEST_ENVIRONMENT='YES'
         ;;

         --motd)
            MULLE_FLAG_MOTD='YES'
         ;;

         --no-motd)
            MULLE_FLAG_MOTD='NO'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --)
            break
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            craft::usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd="${1:-}"

   case "${cmd}" in
      qualifier|style)
         shift
      ;;

    *-dir|search|craftinfo-search|searchpath)
         shift
         MULLE_SQUELCH_ENVIRONMENT_WARNING='YES' craft::setup_environment
      ;;

      *)
         if [ "${cmd}" = '--' ]
         then
            cmd=""
         else
            shift
         fi

         craft::setup_environment

         MULLE_MAKE="${MULLE_MAKE:-`command -v mulle-make`}"
         [ -z "${MULLE_MAKE}" ] && fail "mulle-make not in PATH"

         MULLE_DISPENSE="${MULLE_DISPENSE:-`command -v mulle-dispense`}"
         [ -z "${MULLE_DISPENSE}" ] && fail "mulle-dispense not in PATH"
      ;;
   esac

   #
   # project can give the default way to build this
   #
   cmd="${cmd:-${MULLE_CRAFT_DEFAULT_CMD}}"

   case "${cmd:-project}" in
      addiction-dir)
         printf "%s\n" "${ADDICTION_DIR}"
      ;;

      dependency-dir)
         printf "%s\n" "${DEPENDENCY_DIR}"
      ;;

      craftorder-kitchen-dir)
         if [ $# -eq 0 ]
         then
            printf "%s\n" "${CRAFTORDER_KITCHEN_DIR}"
         else
            include "craft::path"

            craft::path::main "$@"
         fi
      ;;

      kitchen-dir)
         printf "%s\n" "${KITCHEN_DIR}"
      ;;

      libexec-dir)
         printf "%s\n" "${MULLE_CRAFT_LIBEXEC_DIR}"
      ;;

      craftorder)
         # shellcheck source=src/mulle-craft-build.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         craft::build::craftorder_main "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-craft-clean.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-clean.sh"

         craft::clean::main "$@"
      ;;

      donefile|donefiles)
         # shellcheck source=src/mulle-craft-donefile.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-donefile.sh"

         craft::donefile::main "$@"
      ;;

      install)
         log_info "mulle-craft doesn't install. Use mulle-make directly."
         exit 1
      ;;

      list)
         # shellcheck source=src/mulle-craft-build.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         craft::build::list_craftorder_main "$@"
      ;;

      log)
         # shellcheck source=src/mulle-craft-log.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-log.sh"

         craft::log::main "$@"
      ;;

      tool-env)
         printf "ADDICTION_DIR='%s'\n" "${ADDICTION_DIR}"
         printf "CRAFTORDER_KITCHEN_DIR='%s'\n" "${CRAFTORDER_KITCHEN_DIR}"
         printf "DEPENDENCY_DIR='%s'\n" "${DEPENDENCY_DIR}"
         printf "KITCHEN_DIR='%s'\n" "${KITCHEN_DIR}"
      ;;

      project)
         # shellcheck source=src/mulle-craft-build.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         craft::build::project_main "$@"
      ;;

      qualifier)
         # shellcheck source=src/mulle-craft-qualifier.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-qualifier.sh"

         craft::qualifier::main "$@"
      ;;

      quickstatus)
         # shellcheck source=src/mulle-craft-dependency.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-dependency.sh"

         craft::dependency::quickstatus_main "$@"
      ;;

      find)
         # shellcheck source=src/mulle-craft-path.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-craftinfo.sh"

         craft::craftinfo::main "$@"
      ;;

      searchpath)
         # shellcheck source=src/mulle-craft-searchpath.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-searchpath.sh"

         craft::searchpath::main "$@"
      ;;

      status)
         # shellcheck source=src/mulle-craft-status.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-status.sh"

         craft::status::main "$@"
      ;;

      style)
         # shellcheck source=src/mulle-craft-style.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-style.sh"

         craft::style::main "$@"
      ;;

      uname)
         exekutor printf "%s\n" "${MULLE_UNAME}"
      ;;

      version)
         exekutor printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-build.sh"

         craft::build::single_dependency_main "${cmd}" "$@"
      ;;
   esac
}


call_with_flags "craft::main" "${MULLE_CRAFT_FLAGS}" "$@"

#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.5.6


trap_fail()
{
   exit 1
}


usage()
{
   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   Build projects given by supplied \`buildorder\`. Then build the main
   project.

Flags:
EOF

   (
      options_technical_flags_usage "              : "

      cat <<EOF
   -f <file>          : specify buildorder file, mandatory for some commands
   -e                 : use mulle-craft outside of mulle-env
EOF
   ) | sort

   cat <<EOF

Commands:
   all                : build buildorder and project 
   buildorder         : build buildorder only
   clean              : clean output
   project            : build the project (outside buildorder) only (default)
EOF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = "NO" ]
   then
      cat <<EOF

      (use mulle-craft -v help to show more commands and flags)
EOF
   fi

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local MULLE_FLAG_MOTD="DEFAULT"
   local FLAG_OUTSIDE_ENV="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         MULLE_MAKE_FLAGS="`concat "${MULLE_MAKE_FLAGS}" "$1"`"
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         -e)
            FLAG_OUTSIDE_ENV="YES"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         --motd)
            MULLE_FLAG_MOTD="YES"
         ;;

         --no-motd)
            MULLE_FLAG_MOTD="NO"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --build-dir)
            [ $# -eq 1 ] && build_execute_usage "missing argument to \"$1\""
            shift

            BUILD_DIR="$1"
         ;;

         --info-dir)
            [ $# -eq 1 ] && build_execute_usage "missing argument to \"$1\""
            shift

            INFO_DIR="$1"
         ;;

         -f|--buildorder-file)
            [ $# -eq 1 ] && build_execute_usage "missing argument to \"$1\""
            shift

            BUILDORDER_FILE="$1"
         ;;

         --d|--project-dir)
            [ $# -eq 1 ] && build_execute_usage "missing argument to \"$1\""
            shift

            exekutor cd "$1" || exit 1
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   case "${MULLE_VIRTUAL_ROOT}" in
      "")
         if [ "${FLAG_OUTSIDE_ENV}" = "NO" ]
         then
            fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the -e flag"
         fi

         MULLE_VIRTUAL_ROOT="`pwd -P`"
         if [ "${MULLE_VIRTUAL_ROOT}" = "/" ]
         then
            fail "You are running this in root, which is not supported"
         fi
         export MULLE_VIRTUAL_ROOT

         DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_VIRTUAL_ROOT}/dependency}"
         ADDICTION_DIR="${ADDICTION_DIR:-${MULLE_VIRTUAL_ROOT}/addiction}"
      ;;

      */)
         fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" must not end with /"
      ;;
   esac

   local cmd="$1"

   [ $# -eq 0 ] || shift

   MULLE_MAKE="${MULLE_MAKE:-`command -v mulle-make`}"
   [ -z "${MULLE_MAKE}" ] && fail "mulle-make not in PATH"

   MULLE_DISPENSE="${MULLE_DISPENSE:-`command -v mulle-dispense`}"
   [ -z "${MULLE_DISPENSE}" ] && fail "mulle-dispense not in PATH"

   #
   # project can give the default way to build this
   #
   cmd="${cmd:-${MULLE_CRAFT_DEFAULT_CMD}}"

   case "${cmd:-project}" in
      all)
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_all_main "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-craft-clean.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-clean.sh"

         build_clean_main "$@"
      ;;

      libexec-dir|library-path)
         echo "${MULLE_CRAFT_LIBEXEC_DIR}"
      ;;

      install)
         log_info "mulle-craft doesn't install. Use mulle-make directly."
         exit 1
      ;;

      project)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_project_main "$@"
      ;;

      buildorder)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_buildorder_main "$@"
      ;;

      uname)
         exekutor echo "${MULLE_UNAME}"
      ;;

      version)
         exekutor echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   if [ "$1" = "version" ]
   then
      echo "${MULLE_ENV_VERSION}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
      echo "mulle-bashfunctions-env not installed" >&2 && \
      exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" || exit 1

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-craft" "mulle-craft-execute.sh"

   if [ -z "${_libexec_dir}" ]
   then
      fail "Fatal Error: Could not find libexec for ${MULLE_EXECUTABLE} ($PWD)"
   fi
   MULLE_CRAFT_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   if [ "$1" = "libexec-dir" ]
   then
      echo "${MULLE_CRAFT_LIBEXEC_DIR}"
      exit 0
   fi

   set -o pipefail
}



_init "$@" # needs params
main "$@"

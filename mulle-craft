#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
if [ "${TRACE}" = "YES" ]
then
   set -x
fi


MULLE_EXECUTABLE_VERSION_MAJOR=0
MULLE_EXECUTABLE_VERSION_MINOR=1
MULLE_EXECUTABLE_VERSION_PATCH=1

MULLE_EXECUTABLE_VERSION="${MULLE_EXECUTABLE_VERSION_MAJOR}.${MULLE_EXECUTABLE_VERSION_MINOR}.${MULLE_EXECUTABLE_VERSION_PATCH}"


trap_fail()
{
   exit 1
}


usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] [command]

   Build projects by taking mulle-sourcetree into consideration.

Flags:
EOF

   options_technical_flags_usage "           : "

   cat <<EOF
   -e                 : use mulle-craft outside of mulle-env
   -[RTPN]            : flags passed to mulle-sourcetree

Commands:
   all                : build sourcetreee and project (default)
   clean              : clean output
   only-dependencies  : build the sourcetree dependencies only
   no-dependencies    : build the sourcetree skipping the dependencies
   project            : build the project (outside sourcetree) only
   sourcetree         : build the sourcetree only
EOF

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF

      (use mulle-craft -v help to show more commands and flags)
EOF
   fi

   exit 1
}


#
# stolen from:
# http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
# ----
#
_prepend_path_if_relative()
{
   case "$2" in
      /*)
         echo "$2"
      ;;
      *)
         echo "$1/$2"
      ;;
   esac
}


resolve_symlinks()
{
   local dir_context
   local linkpath

   if linkpath="`readlink "$1"`"
   then
      dir_context=`dirname -- "$1"`
      resolve_symlinks "`_prepend_path_if_relative "${dir_context}" "${linkpath}"`"
   else
      echo "$1"
   fi
}


build_libexec_path()
{
   local executablepath="$1"

   local exedir
   local exedirpath
   local prefix
   local libexecpath

   case "${executablepath}" in
      \.*|/*|~*)
      ;;

      *)
         executablepath="`command -v "${executablepath}"`"
      ;;
   esac

   executablepath="`resolve_symlinks "${executablepath}"`"
   exedirpath="`dirname "${executablepath}"`"
   prefix="`dirname "${exedirpath}"`"
   libexecpath="${prefix}/libexec/mulle-craft"

   if [ ! -x "${libexecpath}/mulle-craft-execute.sh" ]
   then
      libexecpath="${exedirpath}/src"
   fi

   case "$libexecpath" in
      /*|~*)
      ;;

      *)
         libexecpath="$PWD/$libexecpath"
      ;;
   esac

   if [ -x "${libexecpath}/mulle-craft-execute.sh" ]
   then
      echo "${libexecpath}"
   fi
}


check_executables()
{
   if [ -z "${MULLE_MAKE}" ]
   then
      MULLE_MAKE="mulle-make"
   fi
   if [ -z "`command -v "${MULLE_MAKE}" `" ]
   then
      fail "${MULLE_MAKE} not found or in PATH"
   fi

   if [ -z "${MULLE_SOURCETREE}" ]
   then
      MULLE_SOURCETREE="mulle-sourcetree"
   fi
   if [ -z "`command -v "${MULLE_SOURCETREE}" `" ]
   then
      fail "${MULLE_SOURCETREE} not found or in PATH"
   fi

   if [ -z "${MULLE_DISPENSE}" ]
   then
      MULLE_DISPENSE="mulle-dispense"
   fi
   if [ -z "`command -v "${MULLE_DISPENSE}" `" ]
   then
      fail "${MULLE_DISPENSE} not found or in PATH"
   fi
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local MULLE_FLAG_DEFER="--defer-this"
   local MULLE_FLAG_MOTD="DEFAULT"
   local FLAG_OUTSIDE_ENV="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -e)
            FLAG_OUTSIDE_ENV="YES"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -h|--help)
            usage "${MULLE_TRACE}"
         ;;

         --motd)
            MULLE_FLAG_MOTD="YES"
         ;;

         --no-motd)
            MULLE_FLAG_MOTD="NO"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -R|--defer-root|-T|--defer-this|-P|--defer-parent|-N|--no-defer)
            MULLE_FLAG_DEFER="$1"
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   case "${MULLE_VIRTUAL_ROOT}" in
      "")
         if [ "${FLAG_OUTSIDE_ENV}" = "NO" ]
         then
            fail "To run mulle-craft outside of mulle-env, pass the -e flag"
         fi
         MULLE_VIRTUAL_ROOT="`pwd -P`"
         export MULLE_VIRTUAL_ROOT
      ;;

      */)
         fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" must not end with /"
      ;;
   esac

   local cmd

   cmd="$1"

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"
   [ $# -eq 0 ] || shift

   check_executables

   #
   # project can give the default way to build this
   #
   if [ -z "${cmd}" ]
   then
      cmd="`cat .mulle-craft/default 2> /dev/null`"
   fi

   case "${cmd:-all}" in
      all|build)
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_all_main "$@"
      ;;

      project)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_project_main "$@"
      ;;

      sourcetree)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_sourcetree_main "$@"
      ;;

      only-dependencies)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_sourcetree_main --only-dependencies "$@"
      ;;

      no-dependencies)
         # shellcheck source=src/mulle-craft-execute.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-execute.sh"

         build_sourcetree_main --no-dependencies "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-craft-clean.sh
         . "${MULLE_CRAFT_LIBEXEC_DIR}/mulle-craft-clean.sh"

         build_clean_main "$@"
      ;;

      help)
         usage "${MULLE_TRACE}"
      ;;

      libexec-dir|library-path)
         echo "${MULLE_CRAFT_LIBEXEC_DIR}"
      ;;

      pwd)
         echo "$PWD"
      ;;

      uname)
         echo "${UNAME}"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_CRAFT_LIBEXEC_DIR="`build_libexec_path "$0"`"
   if [ -z "${MULLE_CRAFT_LIBEXEC_DIR}" ]
   then
      echo "$0 fatal error: Could not find libexec ($PWD)" >&2
      exit 1
   fi

   #
   # minimal setup exit
   #
   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_CRAFT_LIBEXEC_DIR}"
         exit 0
      ;;
   esac


   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      if [ -z "`command -v "${executablepath}"`" ]
      then
          echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
      else
         echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
      fi
      exit 1
   fi

   local failmsg

   failmsg="failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh"   || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-logging.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-exekutor.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-exekutor.sh" || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-options.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-options.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-path.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"     || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-file.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"     || fail "${failmsg}"


   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   MULLE_ARGUMENTS="$*"
}

_init "$@" # needs params
main "$@"
